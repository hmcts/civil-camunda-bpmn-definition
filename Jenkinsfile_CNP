#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.GithubAPI

def type = "java"
def product = "civil"
def component = "camunda"
def ccdBranch = "feat/CIV-15042"
def branchesToSync = ['demo', 'perftest','ithc']
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('ccd-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD'),
    secret('default-password', 'DEFAULT_PASSWORD'),
    secret('judge-default-password', 'JUDGE_DEFAULT_PASSWORD'),
    secret('iac-default-password', 'IAC_DEFAULT_PASSWORD')
  ],
  'civil-prod': [
    secret('microservicekey-civil-service', 'S2S_SECRET_PROD')
  ],
  'aac-${env}': [
    secret('idam-mca-client-secret', 'IDAM_MCA_CLIENT_SECRET'),
    secret('idam-mca-system-user-username', 'IDAM_CAA_USERNAME'),
    secret('idam-mca-system-user-password', 'IDAM_CAA_PASSWORD'),
    secret('idam-noc-approver-username', 'IDAM_NOC_APPROVER_USERNAME'),
    secret('idam-noc-approver-password', 'IDAM_NOC_APPROVER_PASSWORD'),
    secret('aac-manage-case-s2s-secret', 'MANAGE_CASE_S2S_KEY'),
    secret('notify-mca-api-key-secret', 'NOTIFY_MCA_API_KEY')
  ],
]

def secretsOtherenv = [
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
  ]
]

def createGithubRelease() {
  sh """
    ./bin/create-github-release.sh
  """
}

def uploadBpmnDiagrams(String env) {
  dir("${WORKSPACE}/bin") {
    sh """
      eval \$(./variables/load-${env}-environment-variables.sh)
      ./import-bpmn-diagram.sh ${WORKSPACE} ${env}
    """
  }
}

def checkForEnableHelmLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "enableHelm").contains("enableHelm")
}

withPipeline(type, product, component) {
  pipelineConf = config
  disableLegacyDeployment()
  enableAksStagingDeployment()
  enableSlackNotifications('#civil_notifications')

  onPR {
    env.ENVIRONMENT = "preview"
    loadVaultSecrets(secrets)
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }
  onMaster {
    env.ENVIRONMENT = "aat"
    loadVaultSecrets(secrets)
  }
  onDemo {
    env.ENVIRONMENT = "demo"
    loadVaultSecrets(secretsOtherenv)
  }

  onPerftest {
    env.ENVIRONMENT = "perftest"
    loadVaultSecrets(secretsOtherenv)
  }

  onIthc {
    env.ENVIRONMENT = "ithc"
    loadVaultSecrets(secretsOtherenv)
  }

  syncBranchesWithMaster(branchesToSync)

  afterSuccess('checkout') {
    def subscription = 'nonprod'
    if ( env.ENVIRONMENT == 'ithc' || env.ENVIRONMENT == 'demo' || env.ENVIRONMENT == 'perftest') {
      withSubscription(subscription) {
        withTeamSecrets(pipelineConf, env.ENVIRONMENT) {
          uploadBpmnDiagrams(env.ENVIRONMENT)
        }
      }
    }
  }


  before('smoketest:preview') {
    retry (3) {
      env.URL="https://xui-civil-camunda-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CIVIL_SERVICE_URL="https://civil-camunda-pr-${CHANGE_ID}.preview.platform.hmcts.net"

      sh """
        eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
        ./bin/wait-for.sh definition-store
        ./bin/add-roles.sh
        ./bin/pull-latest-ccd-files.sh ${ccdBranch}
        ./bin/import-ccd-definition.sh "-e *-prod.json,*HNL-nonprod.json,*-shuttered.json"
      """
    }
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-civil-camunda-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="https://civil-camunda-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.AAC_API_URL="https://manage-case-assignment-civil-camunda-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    dir("${WORKSPACE}/bin") {
      sh """
        eval \$(./variables/load-preview-environment-variables.sh ${CHANGE_ID})
        ./import-bpmn-diagram.sh ${WORKSPACE} preview
      """
    }

    yarnBuilder.yarn('yarn-update')
    yarnBuilder.yarn('install-dependencies')
  }

  afterSuccess('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

  afterSuccess('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  before('smoketest:aat') {
    env.URL="https://civil-camunda-xui-staging.aat.platform.hmcts.net"
    env.CIVIL_SERVICE_URL="https://civil-camunda-staging.preview.platform.hmcts.net"
    sh """
      eval \$(./bin/variables/load-staging-environment-variables.sh)
      ./bin/add-roles.sh
      ./bin/pull-latest-ccd-files.sh ${ccdBranch}
      ./bin/import-ccd-definition.sh "-e *-nonprod.json,*-COS-nonprod.json,*-shuttered.json"
    """
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "https://civil-camunda-data-store-staging-aat.service.core-compute-aat.internal"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="https://civil-camunda-staging.aat.platform.hmcts.net"
    env.AAC_API_URL="https://civil-camunda-manage-case-assignment-staging.aat.platform.hmcts.net"
    uploadBpmnDiagrams('staging')

    yarnBuilder.yarn('yarn-update')
    yarnBuilder.yarn('install-dependencies')
  }

  afterSuccess('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

  afterSuccess('functionalTest:aat') {
    createGithubRelease()
    uploadBpmnDiagrams('aat')
    uploadBpmnDiagrams('prod')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }
}

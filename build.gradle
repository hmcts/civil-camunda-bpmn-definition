plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.owasp.dependencycheck' version '6.3.1'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.3'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {

  sourceCompatibility = '11'
  targetCompatibility = '11'

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.owasp.dependencycheck'

  checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
  }

  jacoco {
    toolVersion = '0.8.5' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
  }

// before committing a change, make sure task still works
  dependencyUpdates {
    def isNonStable = { String version ->
      def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
      def regex = /^[0-9,.v-]+$/
      return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
      return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
  }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  dependencyManagement {
    dependencies {
      // CVE-2018-10237 - Unbounded memory allocation
      dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.69'
      // CVE-2020-26945 - Mishandles deserialization of object streams.
      dependency group: 'org.mybatis', name: 'mybatis', version: '3.5.7'
      dependency group: 'commons-io', name: 'commons-io', version: '2.10.0'
    }
    imports {
      mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.3'
    }
  }

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
      url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    maven {
      url  "http://repo.spring.io/milestone"
    }
    maven {
      url  "https://repo.spring.io/libs-milestone"
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task installDependencies(type: Exec, description: 'Installs Yarn dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--frozen-lockfile', '--silent', 'install'
}

task checkDependenciesIntegrity(type: Exec, description: 'Checks integrity of Yarn dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--frozen-lockfile', '--silent', 'check', '--integrity'
}

task awaitApplicationReadiness(type: Exec, description: 'Awaits until application is ready.') {
  commandLine './bin/wait-for.sh', System.env.URL
  commandLine './bin/wait-for.sh', System.env.CIVIL_SERVICE_URL
}

task runSmokeTests(type: Exec, description: 'Runs smoke tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test:smoke'
}

task runFunctionalTests(type: Exec, description: 'Runs functional tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test:functional'
}

task runRpaHandOffTests(type: Exec, description: 'Runs functional tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test:rpa'
}

def inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

task smoke(description: 'Runs the smoke tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, installDependencies, checkDependenciesIntegrity, runSmokeTests))
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, installDependencies, checkDependenciesIntegrity, runFunctionalTests))
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "CIVIL :: camunda-bpmn-definition"
    property "sonar.projectKey", "civil-camunda-bpmn-definition"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
  }
}

jacocoTestReport {
  executionData(test)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
  subprojects.each {
    sourceSets it.sourceSets.main
  }
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacocoTestReport.dependsOn {
  subprojects*.test
}

def versions = [
  junit              : '5.7.2',
  junitPlatform      : '1.7.2'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: '7.15.0'
  implementation group: 'org.camunda.bpm.extension.rest', name: 'camunda-rest-client-spring-boot-starter', version: '0.0.6'

  testImplementation libraries.junit5
  testImplementation group: 'org.camunda.bpm.extension.springboot', name: 'camunda-bpm-spring-boot-starter-test', version: '2.2.0'
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'
}


jar {
  getArchiveFileName().set(provider {
    'empty.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}
